let failureCodes = dynamic([50053, 50126, 50055]);
let successCodes = dynamic([0, 50055, 50057, 50155, 50105, 50133, 50005, 50076, 50079, 50173, 50158, 50072, 50074, 53003, 53000, 53001, 50129]);
let authenticationThreshold = 5;
let authenticationWindow = 30m;
let timeRange = 1d;
let lookBack = 7d;
SigninLogs // Identify  IPs with large number of failed attempts
| where TimeGenerated > ago(timeRange)
| where ResultType in (failureCodes)
| summarize FailedPrincipalCount = dcount(UserPrincipalName) by bin(TimeGenerated, authenticationWindow), IPAddress, AppDisplayName
| where FailedPrincipalCount >= authenticationThreshold
| summarize WindowThresholdBreaches = count() by IPAddress
| join kind= inner (// Get the all the login attempts from those IPs, so that we can exclude some genuine IPs by looking at the success rate
SigninLogs 
| where TimeGenerated > ago(lookBack)
| where ResultType  in(successCodes) or ResultType in(failureCodes)
| summarize SuccessPrincipalCount = dcountif(UserPrincipalName, (ResultType == 0)), ResultTypeSuccesses = make_set_if(ResultType, (ResultType  == 0)), FailPrincipalCount = dcountif(UserPrincipalName, (ResultType in (failureCodes))) by IPAddress
| where FailPrincipalCount > SuccessPrincipalCount
) on IPAddress
| join kind=inner ( //Get all the accounts & authentication details for login attempts from those IPs
SigninLogs
| where TimeGenerated > ago(timeRange)
| distinct AuthenticationDetails,IPAddress,ResultType,UserPrincipalName
) on IPAddress
| mv-expand todynamic(AuthenticationDetails) 
| extend Method = AuthenticationDetails.authenticationMethod 
| extend Success = AuthenticationDetails.succeeded 
| summarize SuccessfulAuthMethods = make_set_if(Method,Success == true), FailedAuthMethods = make_set_if(Method,Success == false) by UserPrincipalName,IPAddress,ResultType
| where ResultType == 0 or SuccessfulAuthMethods != "[]"
| extend Reason = iff(ResultType == 0,"Account Compromised","Password Compromised")
| project UserPrincipalName,Reason,IPAddress,SuccessfulAuthMethods,ResultType
//| where IPAddress !in () If needed you can add exclusion to your corporate IPs